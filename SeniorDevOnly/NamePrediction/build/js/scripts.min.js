'use strict';

(function () {
  'use strict';

  // If there isn't names array yet

  if (localStorage.getItem('pokemonsNames') === null) {
    // Take names from public API
    getPokemonsList();
  }

  // Take names from localStorage
  var names = localStorage.pokemonsNames ? JSON.parse(localStorage.pokemonsNames) : [];

  var input = document.getElementById('input');

  //Call selectSuitable function every time when input is changed
  input.oninput = function () {
    selectSuitable(input.value.toLowerCase());
  };

  // Choose name with keyboard
  input.addEventListener('keyup', handleKey);

  var select = document.getElementById('autocomplete');

  // Choose name with mouse
  select.addEventListener('click', showClickedOption);

  var options = document.getElementById('autocomplete').getElementsByTagName('option');

  // Hide predictions when there's onblur event
  input.addEventListener('blur', hideSelect);

  // Show predictions when user 'returns' to input; there's onfocus event
  input.addEventListener('focus', showSelect);

  // **************  
  // All functions are below
  // **************
  function getPokemonsList() {
    // As there are 811 pokemons in www.pokeapi.co, limit=811
    var url = 'http://www.pokeapi.co/api/v2/pokemon/?limit=811';

    // Create new object XMLHttpRequest
    var xhr = new XMLHttpRequest();
    // Confige object XMLHttpRequest
    xhr.open('GET', url, true);
    xhr.onreadystatechange = receiveResponse;
    xhr.send();

    function receiveResponse(e) {
      if (this.readyState == 4) {
        // xhr.readyState == 4, so we've received the complete server response
        if (this.status == 200) {
          // xhr.status == 200, so the response is good
          var result = JSON.parse(xhr.responseText);
          handleNames(result);
        } else {
          noNames();
        }
      }
    }
  }

  function handleNames(result) {

    // Get pokemons array
    var pokemonsArr = result.results;

    // Get pokemons' names
    var pokemonsNames = pokemonsArr.map(function (item) {
      return item.name;
    });

    // Delete not unique names if there are
    pokemonsNames = unique(pokemonsNames);

    // Sort names by alphabet
    pokemonsNames = pokemonsNames.sort();

    // In case if API returns results with capital letters
    pokemonsNames = pokemonsNames.map(function (item) {
      return item.toLocaleLowerCase();
    });

    // Write names array into localStorage
    localStorage.pokemonsNames = JSON.stringify(pokemonsNames);
  }

  // It there's some trouble with the response from API
  function noNames() {
    var sorry = document.createElement('p');
    sorry.innerHTML = 'Sorry, service is unavailable. No pokemons\' names for the prediction is at the moment.';
    sorry.className = 'sorry';

    var section = document.getElementsByClassName('container')[0];
    var form = document.getElementsByClassName('form')[0];
    section.insertBefore(sorry, form);
  }

  function unique(arr) {
    // Create subsidiary object
    var obj = {};

    for (var i = 0; i < arr.length; i++) {
      var str = arr[i]; // Make string from each array element
      obj[str] = true; // Remember each string like object property
    }

    return Object.keys(obj);
  }

  function selectSuitable(text) {
    if (text.length === 0) {
      clearPredictions();
      return;
    }
    var amount = 0;
    var suitNames = [];

    for (var i = 0; i < names.length; i++) {
      // Compare every array element with input text
      var rigthLength = 0;
      for (var j = 0; j < text.length; j++) {
        if (names[i][j] === text[j]) {
          rigthLength++;
        }
      }

      // If length of right symbol is equal text (input.value) length
      if (rigthLength === text.length) {
        suitNames[amount] = names[i];
        amount++;
      }

      // If there's already 5 predictions, stop
      if (amount === 5) {
        break;
      }
    }

    showPredictions(suitNames);
  }

  function clearPredictions() {
    var select = document.getElementById('autocomplete');
    select.innerHTML = '';
  }

  function showPredictions(arr) {
    clearPredictions();

    var select = document.getElementById('autocomplete');

    for (var i = 0; i < arr.length; i++) {
      var option = document.createElement('option');
      option.innerHTML = arr[i];
      option.value = arr[i];
      option.className = 'option';
      select.appendChild(option);
    }
  }

  function handleKey(event) {
    var options = document.getElementById('autocomplete').getElementsByTagName('option');
    var selected = -1;
    switch (event.keyCode) {
      case 40:
        // Key Down arrow is pressed
        selected = -1;
        for (var i = 0; i < options.length; i++) {
          if (i in options && options[i].className === 'selected') {
            options[i].className = 'non-selected';
            selected = i;
          }
        }
        selected++;
        for (var _i = 0; _i < options.length; _i++) {
          if (_i in options && _i === selected) {
            options[_i].className = 'selected';
          }
        }
        break;
      case 38:
        // Key Up arrow is pressed
        selected = options.length;
        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (_i2 in options && options[_i2].className === 'selected') {
            options[_i2].className = 'non-selected';
            selected = _i2;
          }
        }
        selected--;
        for (var _i3 = 0; _i3 < options.length; _i3++) {
          if (_i3 in options && _i3 === selected) {
            options[_i3].className = 'selected';
          }
        }
        break;
      case 13:
        // Key Enter is pressed
        for (var _i4 = 0; _i4 < options.length; _i4++) {
          if (_i4 in options && options[_i4].className == 'selected') {
            input.value = options[_i4].innerHTML;
            document.getElementById('autocomplete').innerHTML = '';
          }
        }
        break;
    }
  }

  function showClickedOption() {
    var index = document.getElementById('autocomplete').selectedIndex;
    input.value = options[index].innerHTML;
    document.getElementById('autocomplete').innerHTML = '';
  }

  function hideSelect() {
    select.style.display = 'none';
  }

  function showSelect() {
    select.style.display = 'block';
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
